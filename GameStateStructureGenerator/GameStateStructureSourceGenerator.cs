using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;

namespace GameStateStructure.Generator
{

	[Generator]
	public partial class GameStateStructureSourceGenerator : ISourceGenerator
	{
		private List<string> m_Logs = new();

		public void Execute(GeneratorExecutionContext context)
		{
			try
			{
				Generate(context);
			}
			catch (Exception err)
			{
				context.AddSource("GameStateStructure.Error.cs", err.ToString());
			}

			_ = context.SyntaxReceiver as SyntaxReceiver;
			if (m_Logs.Any())
			{
				context.AddSource("GameStateStructure.Logs.cs", "// " + string.Join("\n//", m_Logs));
			}
		}

		private void Generate(GeneratorExecutionContext context)
		{
			string moduleName = context.Compilation.SourceModule.Name;
			if (moduleName.StartsWith("UnityEngine."))
			{
				return;
			}

			if (moduleName.StartsWith("UnityEditor."))
			{
				return;
			}

			if (moduleName.StartsWith("Unity."))
			{
				return;
			}

			SyntaxReceiver receiver = context.SyntaxReceiver as SyntaxReceiver;

			foreach (var node in receiver.List)
			{
				SemanticModel semanticModel = context.Compilation.GetSemanticModel(node.SyntaxTree);
				ISymbol symbol = semanticModel.GetDeclaredSymbol(node, context.CancellationToken);

				foreach (var attr in symbol.GetAttributes())
				{
					if (TransAttribute.TryGet(attr, out TransAttribute data))
					{
						GenerateTransMethod(context, symbol, data);
					}
					if (PublishEventData.TryGet(attr, out PublishEventData publishEventData))
					{
						GeneratePublishEventMethod(context, symbol, publishEventData);
					}
				}
			}
		}

		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
		}

		private void GeneratePublishEventMethod(GeneratorExecutionContext context, ISymbol symbol, PublishEventData attr)
		{
			if (attr.Events.Count == 0)
			{
				return;
			}

			string fileName = $"{symbol.Name}.Event.{attr.Type.ToDisplayString()}.cs";

			CodeEmitter emitter = new();
			emitter.AppendLine("// <auto-generated />");
			emitter.AppendLine("using GameStateStructure;");
			emitter.AppendLine("using System.Threading;");
			emitter.AppendLine("using System.Threading.Tasks;");
			emitter.NewLine();

			Stack<IDisposable> brace = new();

			if (!symbol.ContainingNamespace.IsGlobalNamespace)
			{
				emitter.AppendLine($"namespace {symbol.ContainingNamespace.ToDisplayString()}");
				brace.Push(emitter.Brace());
			}

			Stack<INamedTypeSymbol> parent = new();
			INamedTypeSymbol nestType = symbol.ContainingType;
			while (nestType != null)
			{
				parent.Push(nestType);
				nestType = nestType.ContainingType;
			}
			while (parent.Count > 0)
			{
				INamedTypeSymbol p = parent.Pop();
				emitter.AppendLine($"partial class {p.Name}");
				brace.Push(emitter.Brace());
			}

			emitter.AppendLine($"partial class {symbol.Name}");

			using (emitter.Brace())
			{
				foreach (var e in attr.Events)
				{
					var argsStrings = e.Symbol.Parameters.Select(x => GetArg(x));

					string argParam = string.Join(", ", argsStrings);

					if (e.IsAsync())
					{
						emitter.AppendLine($"protected async {e.Symbol.ReturnType.ToDisplayString()} {attr.Prefix}{e.Symbol.Name}({argParam})");
					}
					else
					{
						emitter.AppendLine($"protected void {attr.Prefix}{e.Symbol.Name}({argParam})");
					}

					using (emitter.Brace())
					{

						emitter.AppendLine($"if (!Active) return;");

						var inputStrings = e.Symbol.Parameters.Select(x => x.Name);

						string inputParam = string.Join(", ", inputStrings);

						if (e.Subscribe.ChildOnly && !e.Subscribe.Broadcast)
						{
							emitter.AppendLine($"var state = FindParentState<{attr.Type.ToDisplayString()}>();");
							emitter.AppendLine($"if (state == null) return;");
							if (e.IsAsync())
							{
								emitter.AppendLine($"await state.{e.Symbol.Name}({inputParam});");
							}
							else
							{
								emitter.AppendLine($"state.{e.Symbol.Name}({inputParam});");
							}
						}
						else
						{
							if (e.Subscribe.ChildOnly)
							{
								emitter.AppendLine($"foreach(var state in  FindParentStates<{attr.Type.ToDisplayString()}>())");
							}
							else
							{
								emitter.AppendLine($"foreach(var state in  Manager.FindAllStates<{attr.Type.ToDisplayString()}>())");
							}
							using (emitter.Brace())
							{
								if (e.IsAsync())
								{
									emitter.AppendLine($"await state.{e.Symbol.Name}({inputParam});");
								}
								else
								{
									emitter.AppendLine($"state.{e.Symbol.Name}({inputParam});");
								}
								if (!e.Subscribe.Broadcast)
								{
									emitter.AppendLine($"return;");
								}
							}
						}
					}

					string GetArg(IParameterSymbol symbol)
					{
						if (symbol.HasExplicitDefaultValue)
						{
							if (symbol.ExplicitDefaultValue == null)
							{
								return $"{symbol.Type.ToDisplayString()} {symbol.Name} = default";
							}
							if (symbol.ExplicitDefaultValue is bool boolean)
							{
								if (boolean)
								{
									return $"{symbol.Type.ToDisplayString()} {symbol.Name} = true";
								}
								else
								{
									return $"{symbol.Type.ToDisplayString()} {symbol.Name} = false";
								}
							}
							if (symbol.ExplicitDefaultValue is string text)
							{
								return $"{symbol.Type.ToDisplayString()} {symbol.Name} = \"{text}\"";
							}
							return $"{symbol.Type.ToDisplayString()} {symbol.Name} = {symbol.ExplicitDefaultValue}";
						}
						return $"{symbol.Type.ToDisplayString()} {symbol.Name}";
					}
				}
			}

			while (brace.Count > 0)
			{
				brace.Pop().Dispose();
			}
			context.AddSource(fileName, emitter.ToString());

		}

		private void GenerateTransMethod(GeneratorExecutionContext context, ISymbol symbol, TransAttribute attr)
		{
			TransAttribute.ChangeType changeType = attr.Type;

			StateData stateData = StateData.Create(attr.Symbol);

			string fileName = $"{symbol.ToDisplayString()}.{attr.Type}.{stateData.Name}.cs";

			CodeEmitter emitter = new();
			emitter.AppendLine("// <auto-generated />");
			emitter.AppendLine("using GameStateStructure;");
			emitter.AppendLine("using System.Threading;");
			emitter.AppendLine("using System.Threading.Tasks;");
			emitter.NewLine();

			Stack<IDisposable> brace = new();

			if (!symbol.ContainingNamespace.IsGlobalNamespace)
			{
				emitter.AppendLine($"namespace {symbol.ContainingNamespace.ToDisplayString()}");
				brace.Push(emitter.Brace());
			}

			Stack<INamedTypeSymbol> parent = new();
			INamedTypeSymbol nestType = symbol.ContainingType;
			while (nestType != null)
			{
				parent.Push(nestType);
				nestType = nestType.ContainingType;
			}
			while (parent.Count > 0)
			{
				INamedTypeSymbol p = parent.Pop();
				emitter.AppendLine($"partial class {p.Name}");
				brace.Push(emitter.Brace());
			}

			emitter.AppendLine($"partial class {symbol.Name}");
			using (emitter.Brace())
			{
				IEnumerable<string> argsStrings = stateData.Args.Select(x => !x.Option ? $"{x.Type} {x.ArgName}" : $"{x.Type} {x.ArgName} = default");
				if (stateData.IsProcess)
				{
					argsStrings = argsStrings.Append("CancellationToken ct = default");
				}

				string methodName = stateData.ShortName;
				if (!string.IsNullOrEmpty(attr.Name))
				{
					methodName = attr.Name;
				}
				string suffix = attr.Suffix;

				string argParam = string.Join(", ", argsStrings);
				if (stateData.IsProcess)
				{
					if (string.IsNullOrEmpty(stateData.Result))
					{
						emitter.AppendLine($"#if GSS_UNIQUE_METHOD");
						emitter.AppendLine($"protected Task Run{methodName}{suffix}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.RunProcess<{stateData.Name}>(this, parameter, ct);");
						}
						emitter.AppendLine($"#else");
						emitter.AppendLine($"protected Task Run{suffix}<{methodName}>({argParam}) where {methodName} : {stateData.Name}");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.RunProcess<{stateData.Name}>(this, parameter, ct);");
						}
						emitter.AppendLine($"#endif");
					}
					else
					{
						emitter.AppendLine($"#if GSS_UNIQUE_METHOD");
						emitter.AppendLine($"protected Task<{stateData.Result}> Run{methodName}{suffix}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.RunProcess<{stateData.Name}, {stateData.Result}>(this, parameter, ct);");
						}
						emitter.AppendLine($"#else");
						emitter.AppendLine($"protected Task<{stateData.Result}> Run{suffix}<{methodName}>({argParam}) where {methodName} : {stateData.Name}");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.RunProcess<{stateData.Name}, {stateData.Result}>(this, parameter, ct);");
						}
						emitter.AppendLine($"#endif");
					}
				}
				else
				{
					if (changeType == TransAttribute.ChangeType.GoTo)
					{
						emitter.AppendLine($"#if GSS_UNIQUE_METHOD");
						emitter.AppendLine($"protected void GoTo{methodName}{suffix}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.GoTo<{stateData.Name}>(this, parameter);");
						}
						emitter.AppendLine($"#else");
						emitter.AppendLine($"protected void GoTo{suffix}<{methodName}>({argParam}) where {methodName} : {stateData.Name}");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.GoTo<{stateData.Name}>(this, parameter);");
						}
						emitter.AppendLine($"#endif");
					}
					else
					{
						emitter.AppendLine($"#if GSS_UNIQUE_METHOD");
						emitter.AppendLine($"protected void Push{methodName}{suffix}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.Push<{stateData.Name}>(this, parameter);");
						}
						emitter.AppendLine($"#else");
						emitter.AppendLine($"protected void Push{suffix}<{methodName}>({argParam}) where {methodName} : {stateData.Name}");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.Push<{stateData.Name}>(this, parameter);");
						}
						emitter.AppendLine($"#endif");
					}
				}

				void EmitSetParam()
				{
					emitter.AppendLine($"var parameter = new ParameterHolder();");
					foreach (StateArg arg in stateData.Args)
					{
						if (!arg.Option)
						{
							emitter.AppendLine($"parameter.Set(\"{arg.Name}\", {arg.ArgName});");
						}
						else
						{
							if (arg.IsValueType)
							{
								emitter.AppendLine($"if (!{arg.ArgName}.Equals(default))");
							}
							else
							{
								emitter.AppendLine($"if ({arg.ArgName} != default)");
							}
							using (emitter.Brace())
							{
								emitter.AppendLine($"parameter.Set(\"{arg.Name}\", {arg.ArgName});");
							}
						}
					}
				}

			}

			while (brace.Count > 0)
			{
				brace.Pop().Dispose();
			}
			context.AddSource(fileName, emitter.ToString());
		}
	}
}