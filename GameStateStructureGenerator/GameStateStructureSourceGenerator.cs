using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;

namespace GameStateStructure.Generator
{

	[Generator]
	public partial class GameStateStructureSourceGenerator : ISourceGenerator
	{
		List<string> m_Logs = new();

		public void Execute(GeneratorExecutionContext context)
		{
			try
			{
				Generate(context);
			}
			catch (Exception err)
			{
				context.AddSource("GameStateStructure.Error.cs", err.ToString());
			}
			var receiver = context.SyntaxReceiver as SyntaxReceiver;
			if (m_Logs.Any())
			{
				context.AddSource("GameStateStructure.Logs.cs", "// " + string.Join("\n//", m_Logs));
			}
		}

		void Generate(GeneratorExecutionContext context)
		{
			var moduleName = context.Compilation.SourceModule.Name;
			if (moduleName.StartsWith("UnityEngine.")) return;
			if (moduleName.StartsWith("UnityEditor.")) return;
			if (moduleName.StartsWith("Unity.")) return;

			var receiver = context.SyntaxReceiver as SyntaxReceiver;

			foreach (var node in receiver.List)
			{
				var semanticModel = context.Compilation.GetSemanticModel(node.SyntaxTree);
				var symbol = semanticModel.GetDeclaredSymbol(node, context.CancellationToken);

				foreach (var attr in symbol.GetAttributes())
				{
					if (TransAttribute.TryGet(attr, out var data))
					{
						GenerateMethod(context, symbol, data);
					}
				}
			}
		}

		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
		}

		void GenerateMethod(GeneratorExecutionContext context, ISymbol symbol, TransAttribute attr)
		{
			var changeType = attr.Type;

			var stateData = StateData.Create(attr.Symbol);

			var fileName = $"{symbol.ToDisplayString()}.{attr.Type}.{stateData.Name}.cs";

			CodeEmitter emitter = new();
			emitter.AppendLine("// <auto-generated />");
			emitter.AppendLine("using GameStateStructure;");
			emitter.AppendLine("using System.Threading;");
			emitter.AppendLine("using System.Threading.Tasks;");
			emitter.NewLine();

			Stack<IDisposable> brace = new();

			if (!symbol.ContainingNamespace.IsGlobalNamespace)
			{
				emitter.AppendLine($"namespace {symbol.ContainingNamespace.ToDisplayString()}");
				brace.Push(emitter.Brace());
			}

			Stack<INamedTypeSymbol> parent = new Stack<INamedTypeSymbol>();
			var nestType = symbol.ContainingType;
			while (nestType != null)
			{
				parent.Push(nestType);
				nestType = nestType.ContainingType;
			}
			while (parent.Count > 0)
			{
				var p = parent.Pop();
				emitter.AppendLine($"partial class {p.Name}");
				brace.Push(emitter.Brace());
			}

			emitter.AppendLine($"partial class {symbol.Name}");
			using (emitter.Brace())
			{
				var argsStrings = stateData.Args.Select(x => !x.Option ? $"{x.Type} {x.ArgName}" : $"{x.Type} {x.ArgName} = default");
				if (stateData.Modal || changeType == TransAttribute.ChangeType.Push)
				{
					argsStrings = argsStrings.Append("CancellationToken token = default");
				}

				var methodName = stateData.ShortName;
				if (!string.IsNullOrEmpty(attr.Name))
				{
					methodName = attr.Name;
				}

				string argParam = string.Join(", ", argsStrings);
				if (stateData.Modal)
				{
					if (string.IsNullOrEmpty(stateData.Result))
					{
						emitter.AppendLine($"protected Task Run{methodName}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.Module<{stateData.Name}>(this, parameter, token);");
						}
					}
					else
					{
						emitter.AppendLine($"protected Task<{stateData.Result}> Run{methodName}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"return Manager.Module<{stateData.Name}, {stateData.Result}>(this, parameter, token);");
						}
					}
				}
				else
				{
					if (changeType == TransAttribute.ChangeType.GoTo)
					{
						emitter.AppendLine($"protected void GoTo{methodName}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.GoTo<{stateData.Name}>(this, parameter);");
						}
					}
					else
					{
						emitter.AppendLine($"protected void Push{methodName}({argParam})");
						using (emitter.Brace())
						{
							EmitSetParam();
							emitter.AppendLine($"Manager.Push<{stateData.Name}>(this, parameter, token);");
						}
					}
				}

				void EmitSetParam()
				{
					emitter.AppendLine($"var parameter = new ParameterHolder();");
					foreach (var arg in stateData.Args)
					{
						if (arg.Option)
						{
							emitter.AppendLine($"parameter.Set(\"{arg.Name}\", {arg.ArgName});");
						}
						else
						{
							if (arg.IsValueType)
							{
								emitter.AppendLine($"if (!{arg.ArgName}.Equals(default))");
							}
							else
							{
								emitter.AppendLine($"if ({arg.ArgName} != default)");
							}
							using (emitter.Brace())
							{
								emitter.AppendLine($"parameter.Set(\"{arg.Name}\", {arg.ArgName});");
							}
						}
					}
				}

			}

			while (brace.Count > 0)
			{
				brace.Pop().Dispose();
			}
			context.AddSource(fileName, emitter.ToString());
		}
	}
}